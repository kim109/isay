{"version":3,"sources":["korea.js"],"names":[],"mappingsfile":"korea.js","sourcesContent":["$(document).ready(function() {\n    function valueFormat(d) {\n        if (d > 1000000000) {\n            return Math.round(d / 1000000000 * 10) / 10 + \"B\";\n        } else if (d > 1000000) {\n            return Math.round(d / 1000000 * 10) / 10 + \"M\";\n        } else if (d > 1000) {\n            return Math.round(d / 1000 * 10) / 10 + \"K\";\n        } else {\n            return d;\n        }\n    }\n\n    var draw = function() {\n        $.ajax({\n            type: \"POST\",\n            url: \"/report\",\n            data: {type: \"korea\", _token:  $('meta[name=\"csrf-token\"]').attr('content')},\n            success: function(data) {\n                var config = {\n                    \"data0\":\"Location\",\"data1\":\"Member\",\n                    \"label0\":\"label 0\",\"label1\":\"label 1\",\n                    \"color0\":\"#99ccff\",\"color1\":\"#0050A1\",\n                    \"width\":$('#canvas-svg').innerWidth(),\n                    \"height\":$('#canvas-svg').innerWidth() * 1.2\n                }\n\n                $('#count').text('총 참여자: ' + data[0]['Total'] + ' / 광화문 참여자: '+data[0]['HotPlace']);\n\n                var width = config.width, height = config.height;\n\n                var MAP_KEY = config.data0;\n                var MAP_VALUE = config.data1;\n\n                var projection = d3.geoMercator()\n                    .center([127.8, 34.8])\n                    .scale(height * 6)\n                    .translate([width/2, height/2])\n                    .precision(.1);\n\n                var path = d3.geoPath().projection(projection);\n\n                var graticule = d3.geoGraticule();\n\n                $(\"#canvas-svg\").empty();\n                var svg = d3.select(\"#canvas-svg\").append(\"svg\")\n                        .attr(\"width\", width)\n                        .attr(\"height\", height);\n\n                    svg.append(\"path\")\n                        .datum(graticule)\n                        .attr(\"class\", \"graticule\")\n                        .attr(\"d\", path);\n\n                var valueHash = {};\n\n                data.forEach(function(d) {\n                    valueHash[d[MAP_KEY]] = +d[MAP_VALUE];\n                });\n\n                var quantize = d3.scaleLinear()\n                    .domain([1, d3.max(data, function(d){ return (+d[MAP_VALUE]) })])\n                    .range([config.color0, config.color1]);\n\n                d3.json('/topo/skorea_provinces_topo_simple.json', function(error, korea) {\n                    var countries = topojson.feature(korea, korea.objects.skorea_provinces_geo).features;\n\n                    svg.append(\"path\")\n                        .datum(graticule)\n                        .attr(\"class\", \"choropleth\")\n                        .attr(\"d\", path);\n\n                    var g = svg.append(\"g\");\n\n                    g.append(\"path\")\n                        .datum({type: \"LineString\", coordinates: [[-180, 0], [-90, 0], [0, 0], [90, 0], [180, 0]]})\n                        .attr(\"class\", \"equator\")\n                        .attr(\"d\", path);\n\n                    var country = g.selectAll(\".country\").data(countries);\n\n                    country.enter().insert(\"path\")\n                        .attr(\"class\", \"country\")\n                        .attr(\"d\", path)\n                        .attr(\"id\", function(d,i) { return d.id; })\n                        .attr(\"title\", function(d) { return d.properties.name; })\n                        .style(\"fill\", function(d) {\n                            if (valueHash[d.properties.name_eng]) {\n                                var color = quantize((valueHash[d.properties.name_eng]));\n                                return color;\n                            } else {\n                                return \"#ccc\";\n                            }\n                        })\n                        .on(\"mousemove\", function(d) {\n                            var html = \"\";\n\n                            html += \"<div class=\\\"tooltip_kv\\\">\";\n                            html += \"<span class=\\\"tooltip_key\\\">\";\n                            html += d.properties.name;\n                            html += \"</span>\";\n                            html += \"<span class=\\\"tooltip_value\\\">\";\n                            html += (valueHash[d.properties.name_eng] ? valueFormat(valueHash[d.properties.name_eng]) : \"\");\n                            html += \"\";\n                            html += \"</span>\";\n                            html += \"</div>\";\n\n                            $(\"#tooltip-container\").html(html);\n                            $(this).attr(\"fill-opacity\", \"0.8\");\n                            $(\"#tooltip-container\").show();\n\n                            var coordinates = d3.mouse(this);\n\n                            var map_width = $('.choropleth')[0].getBoundingClientRect().width;\n\n                            if (d3.event.pageX < map_width / 2) {\n                                d3.select(\"#tooltip-container\")\n                                    .style(\"top\", (d3.event.layerY + 15) + \"px\")\n                                    .style(\"left\", (d3.event.layerX + 15) + \"px\");\n                            } else {\n                                var tooltip_width = $(\"#tooltip-container\").width();\n                                d3.select(\"#tooltip-container\")\n                                    .style(\"top\", (d3.event.layerY + 15) + \"px\")\n                                    .style(\"left\", (d3.event.layerX - tooltip_width - 30) + \"px\");\n                            }\n                        })\n                        .on(\"mouseout\", function() {\n                            $(this).attr(\"fill-opacity\", \"1.0\");\n                            $(\"#tooltip-container\").hide();\n                        });\n\n                    g.append(\"path\")\n                        .datum(topojson.mesh(korea, korea.objects.skorea_provinces_geo, function(a, b) { return a !== b; }))\n                        .attr(\"class\", \"boundary\")\n                        .attr(\"d\", path);\n\n                    svg.attr(\"height\", config.height * 2.2 / 3);\n                });\n\n                d3.select(self.frameElement).style(\"height\", (height * 2.3 / 3) + \"px\");\n            }\n        });\n    };\n    \n    draw();\n/*\n    setInterval( function() {\n        $(\"#canvas-svg\").empty();\n        draw();\n    },10000);\n*/\n});"]}